//! @file		ZFAppScriptRegister.cpp
//! @author		Deen
//! @copyright	...
//! @version	1.0.0.0
//! @date		2017/09/14

#include "ZeroFlarePCH.h"
namespace ZeroFlare
{

_SCRIPT_REGISTERED_CLASS_DECL( Encoding )
_SCRIPT_REGISTERED_CLASS_IMPL_BEGIN_WITHOUT_CD( Encoding, "The encode type" )
{
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "unknown", _ENCODING_UNKNOWN, "It's unknown text" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "ansi", _ENCODING_ANSI, "It's ANSI text" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "utf-8", _ENCODING_UTF8, "It's UTF-8 text" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "utf-16", _ENCODING_UTF16, "It's UTF-16 text" )
}
_SCRIPT_REGISTERED_CLASS_IMPL_END( )

_SCRIPT_REGISTERED_CLASS_DECL( PlatformType )
_SCRIPT_REGISTERED_CLASS_IMPL_BEGIN_WITHOUT_CD( PlatformType, "The platform type" )
{
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "Unknown", _PLATFORM_TYPE_UNKNOWN, "It's unknown platform" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "Windows", _PLATFORM_TYPE_WINDOWS, "It's unknown platform" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "Android", _PLATFORM_TYPE_ANDROID, "It's unknown platform" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "IOS", _PLATFORM_TYPE_IOS, "It's unknown platform" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "Chrome", _PLATFORM_TYPE_CHROME, "It's unknown platform" )
}
_SCRIPT_REGISTERED_CLASS_IMPL_END( )

_SCRIPT_REGISTERED_CLASS_DECL( Alignment )
_SCRIPT_REGISTERED_CLASS_IMPL_BEGIN_WITHOUT_CD( Alignment, "The Alignment" )
{
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "NONE", _ALIGNMENT_NONE, "None" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "LEFT", _ALIGNMENT_LEFT, "Left align" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "TOP", _ALIGNMENT_TOP, "Top align" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "RIGHT", _ALIGNMENT_RIGHT, "Right align" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "BOTTOM", _ALIGNMENT_BOTTOM, "Bottom align" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "HORZ_JUSTIFIED", _ALIGNMENT_HORZ_JUSTIFIED, "Horizontal auto-justified align" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "VERT_JUSTIFIED", _ALIGNMENT_VERT_JUSTIFIED, "Vertical auto-justified align" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "HORZ_CENTER", _ALIGNMENT_HORZ_CENTER, "Horizontal center align" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "VERT_CENTER", _ALIGNMENT_VERT_CENTER, "Vertical center align" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "LT", _ALIGNMENT_LEFT_TOP, "Left top align" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "CENTER", _ALIGNMENT_CENTER, "Center align" )
}
_SCRIPT_REGISTERED_CLASS_IMPL_END( )

_SCRIPT_REGISTERED_CLASS_DECL( AnimationMode )
_SCRIPT_REGISTERED_CLASS_IMPL_BEGIN_WITHOUT_CD( AnimationMode, "The animation mode" )
{
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "ONCE", _ANIMATION_MODE_ONCE, "Play only once" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "REPEAT", _ANIMATION_MODE_REPEAT, "Loop playing" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "PINGPONG", _ANIMATION_MODE_PINGPONG, "A->B->A playing" )
}
_SCRIPT_REGISTERED_CLASS_IMPL_END( )

_SCRIPT_REGISTERED_CLASS_DECL( AnimationDirection )
_SCRIPT_REGISTERED_CLASS_IMPL_BEGIN_WITHOUT_CD( AnimationDirection, "The animation direction type" )
{
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "FORWARD", _ANIMATION_DIRECTION_FORWARD, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "BACKWARD", _ANIMATION_DIRECTION_BACKWARD, "" )
}
_SCRIPT_REGISTERED_CLASS_IMPL_END( )

_SCRIPT_REGISTERED_CLASS_DECL( EncryptionType )
_SCRIPT_REGISTERED_CLASS_IMPL_BEGIN_WITHOUT_CD( EncryptionType, "The encryption type" )
{
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "UNKNOWN", _ENCRYPTION_UNKNOWN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "DES", _ENCRYPTION_DES, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "AES", _ENCRYPTION_AES, "" )
}
_SCRIPT_REGISTERED_CLASS_IMPL_END( )

_SCRIPT_REGISTERED_CLASS_DECL( EnumInterpolatorType )
_SCRIPT_REGISTERED_CLASS_IMPL_BEGIN_WITHOUT_CD( EnumInterpolatorType, "Enum of interpolator type" )
{
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "CURRENT", _INTERPOLATOR_CURRENT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "NEXT", _INTERPOLATOR_NEXT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "MIDDLE", _INTERPOLATOR_MIDDLE, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "LINEAR", _INTERPOLATOR_LINEAR, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "SINE_IN", _INTERPOLATOR_SINE_IN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "SINE_OUT", _INTERPOLATOR_SINE_OUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "SINE_IN_OUT", _INTERPOLATOR_SINE_INOUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "SINE_OUT_IN", _INTERPOLATOR_SINE_OUTIN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "QUAD_IN", _INTERPOLATOR_QUAD_IN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "QUAD_OUT", _INTERPOLATOR_QUAD_OUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "QUAD_IN_OUT", _INTERPOLATOR_QUAD_INOUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "QUAD_OUT_IN", _INTERPOLATOR_QUAD_OUTIN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "CUBIC_IN", _INTERPOLATOR_CUBIC_IN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "CUBIC_OUT", _INTERPOLATOR_CUBIC_OUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "CUBIC_IN_OUT", _INTERPOLATOR_CUBIC_INOUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "CUBIC_OUT_IN", _INTERPOLATOR_CUBIC_OUTIN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "QUART_IN", _INTERPOLATOR_QUART_IN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "QUART_OUT", _INTERPOLATOR_QUART_OUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "QUART_IN_OUT", _INTERPOLATOR_QUART_INOUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "QUART_OUT_IN", _INTERPOLATOR_QUART_OUTIN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "QUINT_IN", _INTERPOLATOR_QUINT_IN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "QUINT_OUT", _INTERPOLATOR_QUINT_OUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "QUINT_IN_OUT", _INTERPOLATOR_QUINT_INOUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "QUINT_OUT_IN", _INTERPOLATOR_QUINT_OUTIN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "EXPO_IN", _INTERPOLATOR_EXPO_IN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "EXPO_OUT", _INTERPOLATOR_EXPO_OUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "EXPO_INOUT", _INTERPOLATOR_EXPO_INOUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "EXPO_OUTIN", _INTERPOLATOR_EXPO_OUTIN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "CIRC_IN", _INTERPOLATOR_CIRC_IN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "CIRC_OUT", _INTERPOLATOR_CIRC_OUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "CIRC_INOUT", _INTERPOLATOR_CIRC_INOUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "CIRC_OUTIN", _INTERPOLATOR_CIRC_OUTIN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "ELASTIC_IN", _INTERPOLATOR_ELASTIC_IN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "ELASTIC_OUT", _INTERPOLATOR_ELASTIC_OUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "ELASTIC_INOUT", _INTERPOLATOR_ELASTIC_INOUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "ELASTIC_OUTIN", _INTERPOLATOR_ELASTIC_OUTIN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "BACK_IN", _INTERPOLATOR_BACK_IN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "BACK_OUT", _INTERPOLATOR_BACK_OUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "BACK_INOUT", _INTERPOLATOR_BACK_INOUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "BACK_OUTIN", _INTERPOLATOR_BACK_OUTIN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "BOUNCE_IN", _INTERPOLATOR_BOUNCE_IN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "BOUNCE_OUT", _INTERPOLATOR_BOUNCE_OUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "BOUNCE_INOUT", _INTERPOLATOR_BOUNCE_INOUT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "BOUNCE_OUTIN", _INTERPOLATOR_BOUNCE_OUTIN, "" )
}
_SCRIPT_REGISTERED_CLASS_IMPL_END( )

_SCRIPT_REGISTERED_CLASS_DECL( EnumSamplerFilter )
_SCRIPT_REGISTERED_CLASS_IMPL_BEGIN_WITHOUT_CD( EnumSamplerFilter, "Enum of sampler filter type(SF, Sampler Filter)" )
{
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "NEAREST", _SF_NEAREST, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "LINEAR", _SF_LINEAR, "" )
}
_SCRIPT_REGISTERED_CLASS_IMPL_END( )

_SCRIPT_REGISTERED_CLASS_DECL( EnumSamplerAddressMode )
_SCRIPT_REGISTERED_CLASS_IMPL_BEGIN_WITHOUT_CD( EnumSamplerAddressMode, "The (SAM, Sampler Address Mode)" )
{
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "WRAP", _SAM_WRAP, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "CLAMP", _SAM_CLAMP, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "CLAMP_TO_EDGE", _SAM_CLAMP_TO_EDGE, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "MIRROR", _SAM_MIRROR, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "REPEAT", _SAM_REPEAT, "" )
}
_SCRIPT_REGISTERED_CLASS_IMPL_END( )

_SCRIPT_REGISTERED_CLASS_DECL( EnumRasterizerFillMode )
_SCRIPT_REGISTERED_CLASS_IMPL_BEGIN_WITHOUT_CD( EnumRasterizerFillMode, "The (RFM, Rasterizer Fill Mode)" )
{
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "POINT", _RFM_POINT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "WIREFRAME", _RFM_WIREFRAME, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "SOLID", _RFM_SOLID, "" )
}
_SCRIPT_REGISTERED_CLASS_IMPL_END( )

_SCRIPT_REGISTERED_CLASS_DECL( EnumRasterizerCullMode )
_SCRIPT_REGISTERED_CLASS_IMPL_BEGIN_WITHOUT_CD( EnumRasterizerCullMode, "The (RCM, Rasterizer Cull Mode)" )
{
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "NONE", _RCM_NONE, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "CW", _RCM_CW, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "CCW", _RCM_CCW, "" )
}
_SCRIPT_REGISTERED_CLASS_IMPL_END( )

_SCRIPT_REGISTERED_CLASS_DECL( EnumColorWriteMask )
_SCRIPT_REGISTERED_CLASS_IMPL_BEGIN_WITHOUT_CD( EnumColorWriteMask, "The (CWM, Color Write Mask)" )
{
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "RED", _CWM_RED, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "GREEN", _CWM_GREEN, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "BLUE", _CWM_BLUE, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "ALPHA", _CWM_ALPHA, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "RGB", _CWM_RGB, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "RGBA", _CWM_RGBA, "" )
}
_SCRIPT_REGISTERED_CLASS_IMPL_END( )

_SCRIPT_REGISTERED_CLASS_DECL( EnumCompareFunction )
_SCRIPT_REGISTERED_CLASS_IMPL_BEGIN_WITHOUT_CD( EnumCompareFunction, "The (CF, Compare Function)" )
{
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "LESS", _CF_LESS, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "LESS_EQUAL", _CF_LESS_EQUAL, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "GREATER", _CF_GREATER, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "GREATER_EQUAL", _CF_GREATER_EQUAL, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "EQUAL", _CF_EQUAL, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "NOT_EQUAL", _CF_NOT_EQUAL, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "NEVER", _CF_NEVER, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "ALWAYS", _CF_ALWAYS, "" )
}
_SCRIPT_REGISTERED_CLASS_IMPL_END( )

_SCRIPT_REGISTERED_CLASS_DECL( EnumStencilOperation )
_SCRIPT_REGISTERED_CLASS_IMPL_BEGIN_WITHOUT_CD( EnumStencilOperation, "The (SO, Stencil Operation)" )
{
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "KEEP", _SO_KEEP, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "ZERO", _SO_ZERO, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "REPLACE", _SO_REPLACE, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "SATURATED_INCREMENT", _SO_SATURATED_INCREMENT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "SATURATED_DECREMENT", _SO_SATURATED_DECREMENT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "INVERT", _SO_INVERT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "INCREMENT", _SO_INCREMENT, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "DECREMENT", _SO_DECREMENT, "" )
}
_SCRIPT_REGISTERED_CLASS_IMPL_END( )

_SCRIPT_REGISTERED_CLASS_DECL( EnumBlendFactor )
_SCRIPT_REGISTERED_CLASS_IMPL_BEGIN_WITHOUT_CD( EnumBlendFactor, "The (BF, Blend Factor)" )
{
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "ZERO", _BF_ZERO, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "ONE", _BF_ONE, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "SOURCE_COLOR", _BF_SOURCE_COLOR, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "INVERSE_SOURCE_COLOR", _BF_INVERSE_SOURCE_COLOR, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "SOURCE_ALPHA", _BF_SOURCE_ALPHA, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "INVERSE_SOURCE_ALPHA", _BF_INVERSE_SOURCE_ALPHA, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "DEST_ALPHA", _BF_DEST_ALPHA, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "INVERSE_DEST_ALPHA", _BF_INVERSE_DEST_ALPHA, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "DEST_COLOR", _BF_DEST_COLOR, "" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "INVERSE_DEST_COLOR", _BF_INVERSE_DEST_COLOR, "" )
}
_SCRIPT_REGISTERED_CLASS_IMPL_END( )

_SCRIPT_REGISTERED_CLASS_DECL( ScriptType )
_SCRIPT_REGISTERED_CLASS_IMPL_BEGIN_WITHOUT_CD( ScriptType, "The script type" )
{
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "UNKNOWN", _SCRIPT_UNKNOWN, "Unknown" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "PYTHON", _SCRIPT_PYTHON, "Python" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "JAVA_SCRIPT", _SCRIPT_JAVA_SCRIPT, "JavaScript" )
	_SCRIPT_REGISTERED_CLASS_REGISTER_ENUM_VALUE( "LUA", _SCRIPT_LUA, "Lua" )
}
_SCRIPT_REGISTERED_CLASS_IMPL_END( )


_SCRIPT_REGISTERED_CLASS_DECL( Vector2 )
_SCRIPT_REGISTERED_CLASS_DECL( ZF2DSprite )
_SCRIPT_REGISTERED_CLASS_DECL( ZFAppScript )


// The 'Vector2' class methods
// --------------------------------------------------
GENERIC_METHOD( Vector2, Equal )
{
	GENERIC_GET_OBJECT_ARG_0( Vector2*, vector );
	GENERIC_GET_NUMBER_ARG_1( _float, margin );

	GENERIC_SET_RET_OBJ( GENERIC_GET_OBJ( Vector2 )->Equal( *vector, margin ) );
}
GENERIC_METHOD( Vector2, Magnitude )
{

	GENERIC_SET_RET_OBJ( GENERIC_GET_OBJ( Vector2 )->Magnitude( ) );
}
GENERIC_METHOD( Vector2, MagnitudeSquared )
{

	GENERIC_SET_RET_OBJ( GENERIC_GET_OBJ( Vector2 )->MagnitudeSquared( ) );
}

// The 'ZF2DSprite' class methods
// --------------------------------------------------
GENERIC_METHOD( ZF2DSprite, Load )
{
	GENERIC_GET_WSTRING_ARG_0( res_name );

	GENERIC_SET_RET_OBJ( GENERIC_GET_OBJ( ZF2DSprite )->Load( res_name ) );
}
GENERIC_METHOD( ZF2DSprite, LoadWithMaxSizeLimited )
{
	GENERIC_GET_WSTRING_ARG_0( res_name );
	GENERIC_GET_NUMBER_ARG_1( _dword, max_width );
	GENERIC_GET_NUMBER_ARG_2( _dword, max_height );

	GENERIC_SET_RET_OBJ( GENERIC_GET_OBJ( ZF2DSprite )->LoadWithMaxSizeLimited( res_name, max_width, max_height ) );
}

// The 'ZFAppScript' class methods
// --------------------------------------------------
GENERIC_METHOD( ZFAppScript, EnableRemoteDebugger )
{
	GENERIC_GET_WSTRING_ARG_0( address );

	GENERIC_SET_RET_OBJ( GENERIC_GET_OBJ( ZFAppScript )->EnableRemoteDebugger( address ) );
}
GENERIC_METHOD( ZFAppScript, GetPlatformType )
{

	GENERIC_SET_RET_OBJ( GENERIC_GET_OBJ( ZFAppScript )->GetPlatformType( ) );
}


// The 'Vector2' class register
// --------------------------------------------------
_SCRIPT_REGISTERED_CLASS_IMPL_BEGIN( Vector2, "This class represents a 2D vector" )
{
	_SCRIPT_REGISTERED_CLASS_REGISTER_PROPERTY( Vector2, "_float x", x, "X-component of the vector" );
	_SCRIPT_REGISTERED_CLASS_REGISTER_PROPERTY( Vector2, "_float y", y, "Y-component of the vector" );
	_SCRIPT_REGISTERED_CLASS_REGISTER_METHOD( Vector2, "_ubool Equal(Vector2*, _float)", Equal, "Compare two vectors with error margin" );
	_SCRIPT_REGISTERED_CLASS_REGISTER_METHOD( Vector2, "_float Magnitude()", Magnitude, "Calculates vector magnitude" );
	_SCRIPT_REGISTERED_CLASS_REGISTER_METHOD( Vector2, "_float MagnitudeSquared()", MagnitudeSquared, "Calculates the square of vector magnitude, this function is faster than Magnitude" );
}
_SCRIPT_REGISTERED_CLASS_IMPL_END( )

// The 'ZF2DSprite' class register
// --------------------------------------------------
_SCRIPT_REGISTERED_CLASS_IMPL_BEGIN( ZF2DSprite, "This class represents a 2D sprite" )
{
	_SCRIPT_REGISTERED_CLASS_REGISTER_METHOD( ZF2DSprite, "_ubool Load(WStringPtr)", Load, "Load resource" );
	_SCRIPT_REGISTERED_CLASS_REGISTER_METHOD( ZF2DSprite, "_ubool LoadWithMaxSizeLimited(WStringPtr, _dword, _dword)", LoadWithMaxSizeLimited, "Load resource with max size limited" );
}
_SCRIPT_REGISTERED_CLASS_IMPL_END( )

// The 'ZFAppScript' class register
// --------------------------------------------------
_SCRIPT_REGISTERED_CLASS_IMPL_BEGIN( ZFAppScript, "This class represents a Zero-Flare script system" )
{
	_SCRIPT_REGISTERED_CLASS_REGISTER_METHOD( ZFAppScript, "_ubool EnableRemoteDebugger(WStringPtr)", EnableRemoteDebugger, "Enable remote debugger" );
	_SCRIPT_REGISTERED_CLASS_REGISTER_METHOD( ZFAppScript, "PlatformType GetPlatformType()", GetPlatformType, "Get the platform type" );
}
_SCRIPT_REGISTERED_CLASS_IMPL_END( )


}

extern "C" void RegisterZFAppScript( )
{
_SCRIPT_REGISTERED_CLASS_REGISTER( Alignment )
_SCRIPT_REGISTERED_CLASS_REGISTER( AnimationDirection )
_SCRIPT_REGISTERED_CLASS_REGISTER( AnimationMode )
_SCRIPT_REGISTERED_CLASS_REGISTER( Encoding )
_SCRIPT_REGISTERED_CLASS_REGISTER( EncryptionType )
_SCRIPT_REGISTERED_CLASS_REGISTER( EnumBlendFactor )
_SCRIPT_REGISTERED_CLASS_REGISTER( EnumColorWriteMask )
_SCRIPT_REGISTERED_CLASS_REGISTER( EnumCompareFunction )
_SCRIPT_REGISTERED_CLASS_REGISTER( EnumInterpolatorType )
_SCRIPT_REGISTERED_CLASS_REGISTER( EnumRasterizerCullMode )
_SCRIPT_REGISTERED_CLASS_REGISTER( EnumRasterizerFillMode )
_SCRIPT_REGISTERED_CLASS_REGISTER( EnumSamplerAddressMode )
_SCRIPT_REGISTERED_CLASS_REGISTER( EnumSamplerFilter )
_SCRIPT_REGISTERED_CLASS_REGISTER( EnumStencilOperation )
_SCRIPT_REGISTERED_CLASS_REGISTER( PlatformType )
_SCRIPT_REGISTERED_CLASS_REGISTER( ScriptType )
_SCRIPT_REGISTERED_CLASS_REGISTER( Vector2 )
_SCRIPT_REGISTERED_CLASS_REGISTER( ZF2DSprite )
_SCRIPT_REGISTERED_CLASS_REGISTER( ZFAppScript )
}
